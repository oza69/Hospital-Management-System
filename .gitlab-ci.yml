# Creating gradle project
image: gradle:alpine

# Defining variables
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GET_STRATEGY: clone

# Running before script commands
before_script:
  - chmod +x ./gradlew
  - export GRADLE_USER_HOME='pwd'/.gradle

# Defining stages
stages:
  - build
  - test
  - develop
  - deploy

# Creating build stage
build:
  stage: build
  tags:
    - ugrad
  script:
    - ./gradlew --build-cache assemble
  artifacts:
    paths:
      - ./app/build/libs/*.jar

# Creating testing stage
test:
  stage: test
  script:
    - ./gradlew check
  tags:
    - ugrad

# Creating development stage
development_branch:
  stage: develop
  image: ruby:latest
  tags:
    - ugrad
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client-y )'
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_SSH_KEY_DEV" | tr -d '\r' | ssh-add -
  script:
    - echo "DB_URL=$DATABASE_URL" > config.properties
    - echo "DB_USER=$DATABASE_TEST_USERNAME" >> config.properties
    - echo "DB_PASSWORD=$DATABASE_TEST_PASSWORD" >> config.properties
    - echo "DB_ENV=$DATABASE_TEST_ENV" >> config.properties
    - echo "$CI_COMMIT_REF_NAME"
    - ssh -o StrictHostKeyChecking=no ${DEPLOY_USER_DEV}@${DEPLOY_HOST} "mkdir ${DEPLOY_DIR_DEV}/${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
    - scp -r -o StrictHostKeyChecking=no ./app/build/libs/*.jar "${DEPLOY_USER_DEV}@${DEPLOY_HOST}:${DEPLOY_DIR_DEV}/${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}/"
    - scp -r -o StrictHostKeyChecking=no ./mysql-connector-java-8.0.25.jar "${DEPLOY_USER_DEV}@${DEPLOY_HOST}:${DEPLOY_DIR_DEV}/${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}/mysql-connector-java-8.0.25.jar"
    - scp -r -o StrictHostKeyChecking=no config.properties "${DEPLOY_USER_DEV}@${DEPLOY_HOST}:${DEPLOY_DIR_DEV}/${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}/config.properties"
  only:
    - develop

# Creating deployment(production) stage
deploy_master:
  stage: deploy
  image: ruby:latest
  tags:
    - ugrad
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client-y )'
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_SSH_KEY_PROD" | tr -d '\r' | ssh-add -
  script:
    - echo "DB_URL=$DATABASE_URL" > config.properties
    - echo "DB_USER=$DATABASE_PROD_USERNAME" >> config.properties
    - echo "DB_PASSWORD=$DATABASE_PROD_PASSWORD" >> config.properties
    - echo "DB_ENV=$DATABASE_PROD_ENV" >> config.properties
    - echo "$CI_COMMIT_REF_NAME"
    - ssh -o StrictHostKeyChecking=no ${DEPLOY_USER_PROD}@${DEPLOY_HOST} "mkdir ${DEPLOY_DIR_PROD}/${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
    - scp -r -o StrictHostKeyChecking=no ./app/build/libs/*.jar "${DEPLOY_USER_PROD}@${DEPLOY_HOST}:${DEPLOY_DIR_PROD}/${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}/"
    - scp -r -o StrictHostKeyChecking=no ./mysql-connector-java-8.0.25.jar "${DEPLOY_USER_PROD}@${DEPLOY_HOST}:${DEPLOY_DIR_PROD}/${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}/mysql-connector-java-8.0.25.jar"
    - scp -r -o StrictHostKeyChecking=no config.properties "${DEPLOY_USER_PROD}@${DEPLOY_HOST}:${DEPLOY_DIR_PROD}/${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}/config.properties"
  only:
    - master